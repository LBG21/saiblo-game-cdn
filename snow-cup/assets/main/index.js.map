{"version":3,"sources":["assets/Script/Eggs.js","assets/Script/File.js"],"names":["EGG_COUNT","PLAYER_COUNT","readHeader","view","frameCount","getUint16","fps","redScore","getUint32","yellowScore","blueScore","timestampLeft","timestampRight","timestamp","Date","Math","pow","eggScores","i","getUint8","readFrame","offset","playerInfo","eggInfo","id","x","getFloat32","y","enduranceZipped","push","position","eggInHand","getInt8","endurance","_id","_x","_y","score","readFromRecordFile","blob","ab","DataView","slice","String","fromCharCode","apply","Array","from","Uint8Array","header","frames","frameNum","abs","number","min","number_a","number_b","cc","Class","extends","Component","properties","containerId","default","visible","inputBoxId","isPlaying","status","count","type","Integer","limitCount","Player","Prefab","players","Node","Egg","eggs","ground","YellowImgs","Texture2D","RedImgs","BlueImgs","framelabel","start","this","initPlayer","update","frame","playersInfo","console","log","imgId","playerImgTrans","positionTrans","children","getComponent","Sprite","spriteFrame","SpriteFrame","ProgressBar","progress","eggsInfo","_i","_id2","_position","getChildByName","Label","string","arr","_i2","_i3","sort","a","b","_i4","zIndex","step","startSetp","continue","restart","skipTo","num_str","EditBox","num","NaN","Number","InitGPE","CanvasNode","find","instantiate","addChild","game","setFrameRate","_i5","_this","loaded","window","saiblo","warn","setTimeout","readFromSaiblo","bind","readFile","replay","t","r","initGPE","confirmReplay","e","length","callback","loadFrame","nthisxtFrame","getInputBox","inputBox","document","getElementById","container","createElement","body","appendChild","onClick","click","fileUrl","reader","FileReader","onload","content","target","result","readAsArrayBuffer","v2","last_position","onLoad"],"mappings":"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","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\nconst EGG_COUNT = 15, PLAYER_COUNT = 12;\r\nfunction arrayBufferToString(ab) {\r\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(ab)));\r\n}\r\nfunction readHeader(view) {\r\n    const frameCount = view.getUint16(8, true);\r\n    const fps = view.getUint16(10, true);\r\n    const redScore = view.getUint32(12, true), yellowScore = view.getUint32(16, true), blueScore = view.getUint32(20, true);\r\n    const timestampLeft = view.getUint32(24, true), timestampRight = view.getUint32(28, true);\r\n    const timestamp = new Date(((timestampRight * (2 ** 32)) + timestampLeft) * 1000); // s -> ms\r\n    // NOTE: code above cannot handle years < 1970, but it doesn't matter\r\n    const eggScores = [], eggScoresOffset = 32;\r\n    for (let i = 0; i < EGG_COUNT; i++) {\r\n        eggScores[i] = view.getUint8(eggScoresOffset + i);\r\n    }\r\n    return { frameCount, fps, redScore, yellowScore,\r\n        blueScore, timestamp, eggScores };\r\n}\r\nfunction readFrame(view, eggScores, offset) {\r\n    const playerInfo = [];\r\n    const eggInfo = [];\r\n    for (let id = 0; id < PLAYER_COUNT; id++) {\r\n        const x = view.getFloat32(offset + 120 + 4 * id, true), y = view.getFloat32(offset + 168 + 4 * id, true);\r\n        const enduranceZipped = view.getUint8(offset + 228 + id);\r\n        playerInfo.push({\r\n            id,\r\n            position: [x, y],\r\n            eggInHand: view.getInt8(offset + 216 + id),\r\n            endurance: enduranceZipped / 255.0 * 5.0\r\n        });\r\n    }\r\n    for (let id = 0; id < EGG_COUNT; id++) {\r\n        const x = view.getFloat32(offset + 4 * id, true), y = view.getFloat32(offset + 60 + 4 * id, true);\r\n        eggInfo.push({\r\n            id,\r\n            position: [x, y],\r\n            score: eggScores[id]\r\n        });\r\n    }\r\n    return { playerInfo, eggInfo };\r\n}\r\nfunction readFromRecordFile(blob) {\r\n    const view = new DataView(blob);\r\n    if (arrayBufferToString(blob.slice(0, 6)) !== 'THAIEG' || view.getUint16(6, true) !== 1) {\r\n        return null;\r\n    }\r\n    const header = readHeader(view);\r\n    const frames = [];\r\n    const frameSizeInBytes = 240;\r\n    for (let frameNum = 0, offset = 47; frameNum < header.frameCount; frameNum++, offset += frameSizeInBytes) {\r\n        frames.push(readFrame(view, header.eggScores, offset));\r\n    }\r\n    return { header, frames };\r\n}\r\n\r\nfunction abs(number) {\r\n    return number >= 0 ? number : -number;\r\n}\r\nfunction min(number_a, number_b) {\r\n    return number_a > number_b ? number_b : number_a;\r\n}\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        containerId : {\r\n            default: \"_filebox_container_\",\r\n            visible: false,\r\n        },\r\n        inputBoxId : {\r\n            default: \"_filebox_input_\",\r\n            visible: false,\r\n        },\r\n        isPlaying : {\r\n            default: false,\r\n            visible: false,\r\n        },\r\n        status : {\r\n            default: -1,\r\n            visible: false,\r\n        },\r\n        count : {\r\n            default: 0,\r\n            type: cc.Integer,\r\n            visible: false,\r\n        },\r\n        limitCount : {\r\n            default: 0,\r\n            type: cc.Integer,\r\n            visible: false,\r\n        },\r\n        header : {\r\n            default: null,\r\n            type: cc.Array,\r\n            visible: false,\r\n        },\r\n        frames : {\r\n            default: null,\r\n            type: cc.Array,\r\n            visible: false,\r\n        },\r\n        Player: cc.Prefab,\r\n        players: {\r\n            default: [],\r\n            type: [cc.Node],\r\n            visible: false,\r\n        },\r\n        Egg : cc.Prefab,\r\n        eggs: {\r\n            default: [],\r\n            type: [cc.Node],\r\n            visible: false,\r\n        },\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        YellowImgs : {\r\n            default: [],\r\n            type: [cc.Texture2D],\r\n        },\r\n        RedImgs : {\r\n            default: [],\r\n            type: [cc.Texture2D],\r\n        },\r\n        BlueImgs : {\r\n            default: [],\r\n            type: [cc.Texture2D],\r\n        },\r\n        number: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        framelabel: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n        this.initPlayer();\r\n    },\r\n\r\n    update (dt) {\r\n        if(this.isPlaying) {\r\n            if(this.count < this.limitCount) {\r\n                let frame = this.frames[this.count];\r\n\r\n                let playersInfo = frame['playerInfo'];\r\n                for(let i = 0; i < 12; ++i) {\r\n                    let id = playersInfo[i]['id'];\r\n                    let position = playersInfo[i]['position'];\r\n                    let eggInHand = playersInfo[i]['eggInHand'];\r\n                    let endurance = playersInfo[i]['endurance'];\r\n                    //console.log(this.players[id]);\r\n                    if(this.count > 0) {\r\n                        console.log(imgId);\r\n                        let imgId = this.playerImgTrans(this.players[id].position, this.positionTrans(position[0], position[1]));\r\n                        if(imgId != -1) {\r\n                            if(id < 4) {\r\n                                this.players[id].children[0].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(this.RedImgs[imgId]);\r\n                            }\r\n                            else if(id > 7) {\r\n                                this.players[id].children[0].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(this.BlueImgs[imgId]);\r\n                            }\r\n                            else {\r\n                                this.players[id].children[0].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(this.YellowImgs[imgId]);\r\n                            }\r\n                            //console.log(imgId, this.players[id].children[0].spriteFrame);\r\n                        }\r\n                    }\r\n                    // 更新player位置\r\n                    this.players[id].position = this.positionTrans(position[0], position[1]);\r\n                    // 更新耐力显示\r\n                    this.players[id].children[2].getComponent(cc.ProgressBar).progress = endurance / 5;\r\n                    console.log(this.players[id].children[2]);\r\n                }\r\n\r\n                let eggsInfo = frame['eggInfo'];\r\n                for(let i = 0; i < 15; ++i) {\r\n                    let id = eggsInfo[i]['id'];\r\n                    let position = eggsInfo[i]['position'];\r\n                    let score = eggsInfo[i]['score'];\r\n                    this.eggs[id].position = this.positionTrans(position[0], position[1]);\r\n                    this.eggs[id].getChildByName('score').getComponent(cc.Label).string = String(score)\r\n                }\r\n\r\n                let arr = []\r\n                for(let i = 0; i < 12; ++i) {\r\n                    arr.push(this.players[i]);\r\n                }\r\n                for(let i = 0; i < 15; ++i) {\r\n                    arr.push(this.eggs[i]);\r\n                }\r\n                arr.sort((a, b) => {return b.y - a.y});\r\n                for(let i = 0; i < 27; ++i) {\r\n                    arr[i].zIndex = i;\r\n                }\r\n\r\n                console.log(this.count)\r\n                this.framelabel.getComponent(cc.Label).string = \"当前帧: \" + String(this.count);\r\n                this.count = this.count + 1;\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    step() {\r\n        this.limitCount = min(this.limitCount + 1, this.header['frameCount']);\r\n    },\r\n\r\n    startSetp() {\r\n        this.limitCount = this.count;\r\n    },\r\n\r\n    continue() {\r\n        this.limitCount = this.header['frameCount'];\r\n    },\r\n\r\n    restart() {\r\n        this.count = 0;\r\n        this.limitCount = 1;\r\n    },\r\n\r\n    skipTo() {\r\n        let num_str = this.number.getComponent(cc.EditBox).string;\r\n        let num = 0;\r\n        if(Number(num_str) != NaN) {\r\n            num = min(Number(num_str), this.header['frameCount'] - 1);\r\n        }\r\n        else {\r\n            this.number.getComponent(cc.EditBox).string = \"0\";\r\n        }\r\n        this.count = num;\r\n        this.limitCount = num + 1;\r\n    },\r\n\r\n    InitGPE() {\r\n        var CanvasNode = cc.find('Canvas');\r\n        for(let i = 0; i < 12; ++i) {\r\n            this.players.push(cc.instantiate(this.Player));\r\n            this.players[i].getChildByName('id').getComponent(cc.Label).string = String(i);\r\n            if(i < 4) {\r\n                this.players[i].getChildByName('img').getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(this.RedImgs[0]);\r\n            }\r\n            else if(i > 7) {\r\n                this.players[i].getChildByName('img').getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(this.BlueImgs[0]);\r\n            }\r\n            else {\r\n                this.players[i].getChildByName('img').getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(this.YellowImgs[0]);\r\n            }\r\n            CanvasNode.addChild(this.players[i]);\r\n\r\n            //设置帧率\r\n            cc.game.setFrameRate(this.header['fps']);\r\n        }\r\n        for(let i = 0; i < 15; ++i) {\r\n            this.eggs.push(cc.instantiate(this.Egg));\r\n            this.eggs[i].getChildByName('id').getComponent(cc.Label).string = String(i);\r\n            CanvasNode.addChild(this.eggs[i]);\r\n        }\r\n\r\n        this.isPlaying = true;\r\n        this.limitCount = 0;\r\n    },\r\n\r\n    initPlayer() {\r\n        if (!this.loaded) {\r\n            console.log(\"Try reading record file...\")\r\n            if (!window.saiblo) {\r\n                console.warn(\"Record file not received. Retry in 500ms...\")\r\n                setTimeout(this.readFromSaiblo.bind(this), 500)\r\n                return\r\n            }\r\n            this.readFile(window.saiblo.replay, (t) => {\r\n                const r = readFromRecordFile(t);\r\n                this.header = r.header\r\n                this.frames = r.frames\r\n                this.initGPE()\r\n                this.skipTo() \r\n                window.saiblo.confirmReplay(e.frames.length)\r\n                console.log(\"Record file read.\"), \r\n                this.loaded = true\r\n            })\r\n            window.saiblo.callback.loadFrame = (t) => {\r\n                this.skipTo(t)\r\n            }\r\n            window.saiblo.callback.nthisxtFrame = () =>{\r\n                this.step()\r\n            }\r\n        }\r\n    },\r\n\r\n    getInputBox(inputBoxId, containerId) {\r\n        if(!this.inputBox) {\r\n            let inputBox = document.getElementById(inputBoxId);\r\n            if(!inputBox) {\r\n                let container = document.getElementById(containerId);\r\n                if(!container) {\r\n                    container = document.createElement('div');\r\n                    document.body.appendChild(container);\r\n                    container.id = containerId;\r\n                }\r\n\r\n                inputBox = document.createElement(\"input\");\r\n                inputBox.id = inputBoxId;\r\n\r\n                inputBox.type = \"file\";\r\n\r\n                container.appendChild(inputBox);\r\n            }\r\n            this.inputBox = inputBox;\r\n        }\r\n        return this.inputBox;\r\n    },\r\n    \r\n    onClick() {\r\n        if(this.inputBox) {\r\n            //console.info(\"click start\");\r\n            this.inputBox.click();\r\n            //console.info(\"click done\");\r\n\r\n        }\r\n    },\r\n\r\n    readFile(fileUrl, callback) {\r\n        //console.log(fileUrl);\r\n        let reader = new FileReader();\r\n        reader.onload = function(e) {\r\n            let content = e.target.result;\r\n            // Display file content\r\n            //console.info(\"===> file content: \", content);\r\n            callback(content);\r\n        };\r\n        reader.readAsArrayBuffer(fileUrl);\r\n    },\r\n\r\n    positionTrans(x, y) {\r\n        x = x * 12  + this.ground.x + 33.48;//偏差调整\r\n        y = y * 12  + this.ground.y - 3.5;//偏差调整\r\n        return cc.v2(x, y);\r\n    },\r\n\r\n    playerImgTrans(last_position, position) {\r\n        console.log(last_position, position);\r\n        if(last_position.y == position.y && last_position.x == position.x) {\r\n            return -1;\r\n        }\r\n        if(abs(last_position.y - position.y) > abs(last_position.x - position.x)) {\r\n            return last_position.y > position.y ? 0 : 1;\r\n        }\r\n        else {\r\n            return last_position.x > position.x ? 2 : 3;\r\n        }\r\n    }\r\n});\r\n","// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\nconst EGG_COUNT = 15, PLAYER_COUNT = 12;\r\nfunction arrayBufferToString(ab) {\r\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(ab)));\r\n}\r\nfunction readHeader(view) {\r\n    const frameCount = view.getUint16(8, true);\r\n    const fps = view.getUint16(10, true);\r\n    const redScore = view.getUint32(12, true), yellowScore = view.getUint32(16, true), blueScore = view.getUint32(20, true);\r\n    const timestampLeft = view.getUint32(24, true), timestampRight = view.getUint32(28, true);\r\n    const timestamp = new Date(((timestampRight * (2 ** 32)) + timestampLeft) * 1000); // s -> ms\r\n    // NOTE: code above cannot handle years < 1970, but it doesn't matter\r\n    const eggScores = [], eggScoresOffset = 32;\r\n    for (let i = 0; i < EGG_COUNT; i++) {\r\n        eggScores[i] = view.getUint8(eggScoresOffset + i);\r\n    }\r\n    return { frameCount, fps, redScore, yellowScore,\r\n        blueScore, timestamp, eggScores };\r\n}\r\nfunction readFrame(view, eggScores, offset) {\r\n    const playerInfo = [];\r\n    const eggInfo = [];\r\n    for (let id = 0; id < PLAYER_COUNT; id++) {\r\n        const x = view.getFloat32(offset + 120 + 4 * id, true), y = view.getFloat32(offset + 168 + 4 * id, true);\r\n        const enduranceZipped = view.getUint8(offset + 228 + id);\r\n        playerInfo.push({\r\n            id,\r\n            position: [x, y],\r\n            eggInHand: view.getInt8(offset + 216 + id),\r\n            endurance: enduranceZipped / 255.0 * 5.0\r\n        });\r\n    }\r\n    for (let id = 0; id < EGG_COUNT; id++) {\r\n        const x = view.getFloat32(offset + 4 * id, true), y = view.getFloat32(offset + 60 + 4 * id, true);\r\n        eggInfo.push({\r\n            id,\r\n            position: [x, y],\r\n            score: eggScores[id]\r\n        });\r\n    }\r\n    return { playerInfo, eggInfo };\r\n}\r\nfunction readFromRecordFile(blob) {\r\n    const view = new DataView(blob);\r\n    if (arrayBufferToString(blob.slice(0, 6)) !== 'THAIEG' || view.getUint16(6, true) !== 1) {\r\n        return null;\r\n    }\r\n    const header = readHeader(view);\r\n    const frames = [];\r\n    const frameSizeInBytes = 240;\r\n    for (let frameNum = 0, offset = 47; frameNum < header.frameCount; frameNum++, offset += frameSizeInBytes) {\r\n        frames.push(readFrame(view, header.eggScores, offset));\r\n    }\r\n    return { header, frames };\r\n}\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n\r\n    },\r\n});\r\n"],"file":"index.js"}